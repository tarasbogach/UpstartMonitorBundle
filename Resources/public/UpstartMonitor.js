// Generated by CoffeeScript 1.9.1
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.UpstartMonitor = (function() {
    UpstartMonitor.prototype.ns = null;

    UpstartMonitor.prototype.el = null;

    UpstartMonitor.prototype.cnf = null;

    UpstartMonitor.prototype.job = null;

    UpstartMonitor.prototype.tag = null;

    UpstartMonitor.prototype.ws = null;

    UpstartMonitor.prototype.filterTag = null;

    function UpstartMonitor(el, cnf1) {
      var job, jobName, ref, ref1, tag, tagName;
      this.cnf = cnf1;
      this.onTag = bind(this.onTag, this);
      this.onError = bind(this.onError, this);
      this.onDisconnected = bind(this.onDisconnected, this);
      this.onConnected = bind(this.onConnected, this);
      this.onMessage = bind(this.onMessage, this);
      this.createWs = bind(this.createWs, this);
      this.onAction = bind(this.onAction, this);
      this.ns = arguments.callee.name;
      this.el = {};
      this.addEl('root', el);
      this.initEl();
      this.job = {};
      this.tag = {};
      ref = this.cnf.tag;
      for (tagName in ref) {
        tag = ref[tagName];
        this.createTag(tag);
      }
      ref1 = this.cnf.job;
      for (jobName in ref1) {
        job = ref1[jobName];
        this.createJob(job);
      }
      this.el.allTags.click(this.onTag);
      this.el.start.click({
        action: 'start'
      }, this.onAction);
      this.el.stop.click({
        action: 'stop'
      }, this.onAction);
      this.el.restart.click({
        action: 'restart'
      }, this.onAction);
      this.createWs();
      if (typeof console !== "undefined" && console !== null) {
        console.log(this);
      }
    }

    UpstartMonitor.prototype.onAction = function(ev) {
      var ref, ref1, ref2;
      return this.ws.send(JSON.stringify({
        type: 'action',
        data: {
          action: ev.data.action,
          job: (ref = (ref1 = ev.data.job) != null ? ref1.name : void 0) != null ? ref : null,
          tag: (ref2 = this.filterTag) != null ? ref2 : null
        }
      }));
    };

    UpstartMonitor.prototype.createWs = function() {
      var ref;
      if ((ref = this.ws) != null) {
        ref.close();
      }
      this.ws = new WebSocket(this.cnf.client.schema + '://' + window.location.hostname + ':' + this.cnf.client.port + this.cnf.client.path);
      this.ws.onmessage = this.onMessage;
      this.ws.onopen = this.onConnected;
      this.ws.onclose = this.onDisconnected;
      return this.ws.onerror = this.onError;
    };

    UpstartMonitor.prototype.onMessage = function(e) {
      var msg;
      msg = JSON.parse(e.data);
      switch (msg.type) {
        case 'state':
          return this.updateState(msg.data);
      }
    };

    UpstartMonitor.prototype.updateState = function(jobs) {
      var cnf, cssState, els, highlight, name, prevQuantity, quantity, ref, results, state;
      highlight = this.getNsClass('highlight');
      results = [];
      for (name in jobs) {
        state = jobs[name];
        cnf = this.cnf.job[name];
        els = this.job[name];
        quantity = cnf.quantity > 1 ? state[1] : state[0];
        prevQuantity = (ref = els.quantity) != null ? ref : 0;
        els.quantity = quantity;
        els.started.text(quantity);
        switch (true) {
          case quantity === 0:
            cssState = 'label-danger';
            break;
          case quantity < cnf.quantity:
            cssState = 'label-warning';
            break;
          case quantity >= cnf.quantity:
            cssState = 'label-success';
        }
        els.state.removeClass('label-danger').removeClass('label-success').removeClass('label-warning').addClass(cssState);
        els.stop.prop('disabled', quantity === 0);
        els.restart.prop('disabled', quantity === 0);
        els.start.prop('disabled', quantity >= cnf.quantity);
        if (prevQuantity !== quantity) {
          results.push(els.row.removeClass(highlight).addClass(highlight));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    UpstartMonitor.prototype.onConnected = function(e) {
      return this.el.disconnected.hide();
    };

    UpstartMonitor.prototype.onDisconnected = function(e) {
      this.el.disconnected.show();
      return this.createWs();
    };

    UpstartMonitor.prototype.onError = function(e) {
      return this.el.disconnected.show();
    };

    UpstartMonitor.prototype.createTag = function(tag) {
      $('<li><a href="#"></a></li>').appendTo(this.el.tag).click({
        tag: tag.name
      }, this.onTag).find('a').text(tag.name);
      if (tag != null) {
        return this.tag[tag.name] = $([]);
      }
    };

    UpstartMonitor.prototype.onTag = function(ev) {
      var ref;
      if (((ref = ev.data) != null ? ref.tag : void 0) != null) {
        this.el.job.find('tr').hide();
        this.tag[ev.data.tag].show();
        return this.filterTag = ev.data.tag;
      } else {
        this.el.job.find('tr').show();
        return this.filterTag = null;
      }
    };

    UpstartMonitor.prototype.createJob = function(job) {
      var i, len, map, nameTd, ref, ref1, tagName, td;
      this.job[job.name] = map = {
        quantity: 0,
        row: null,
        name: null,
        started: null,
        state: null,
        start: null,
        stop: null,
        restart: null,
        log: null,
        tags: null
      };
      td = '<td></td>';
      map.row = $('<tr></tr>').data('name', job.name).appendTo(this.el.job);
      map.state = $('<span class="label label-danger"></span>').appendTo($(td).appendTo(map.row));
      map.started = $('<span>0</span>').appendTo(map.state);
      map.state.append(' / ');
      $('<span></span>').text(job.quantity).appendTo(map.state);
      nameTd = $(td).css('width', '80%').appendTo(map.row);
      map.name = $('<strong></strong>').text((ref = job.name) != null ? ref : '').appendTo(nameTd);
      map.tags = $('<span class="pull-right"></span>').appendTo(nameTd);
      map.tags.append(' ');
      ref1 = job.tag;
      for (i = 0, len = ref1.length; i < len; i++) {
        tagName = ref1[i];
        $('<button class="btn btn-xs btn-primary"></button>').appendTo(map.tags).click({
          tag: tagName
        }, this.onTag).text(tagName != null ? tagName : '');
        this.tag[tagName] = this.tag[tagName].add(map.row);
        map.tags.append(' ');
      }
      map.start = $('<button class="btn btn-xs btn-success" title="Start"> <span class="glyphicon glyphicon-play"></span> </button>').prop('disabled', true).click({
        action: 'start',
        job: job
      }, this.onAction).appendTo($(td).appendTo(map.row));
      map.stop = $('<button class="btn btn-xs btn-danger" title="Stop"> <span class="glyphicon glyphicon-stop"></span> </button>').prop('disabled', true).click({
        action: 'stop',
        job: job
      }, this.onAction).appendTo($(td).appendTo(map.row));
      map.restart = $('<button class="btn btn-xs btn-warning" title="Restart"> <span class="glyphicon glyphicon-refresh"></span> </button>').prop('disabled', true).click({
        action: 'restart',
        job: job
      }, this.onAction).appendTo($(td).appendTo(map.row));
      return map.log = $('<button class="btn btn-xs btn-info" title="Log"> <span class="glyphicon glyphicon-open-file"></span> </button>').click({
        action: 'log',
        job: job
      }, this.onAction).appendTo($(td).appendTo(map.row));
    };

    UpstartMonitor.prototype.addEl = function(name, tmpl) {
      var el;
      if (tmpl == null) {
        tmpl = '<div></div>';
      }
      el = $(tmpl).addClass(this.getElClass(name));
      return this.el[name] = this.el[name] != null ? this.el[name].add(el) : el;
    };

    UpstartMonitor.prototype.getElClass = function(name) {
      return this.ns + '-el-' + name;
    };

    UpstartMonitor.prototype.getNsClass = function(name) {
      return this.ns + '-' + name;
    };

    UpstartMonitor.prototype.getNsSelector = function(name) {
      return '.' + this.ns + '-' + name;
    };

    UpstartMonitor.prototype.initEl = function() {
      var _class, classes, cut, el, els, i, len, pattern, ref, results;
      cut = this.getElClass('');
      pattern = new RegExp(cut + '[a-zA-Z0-9_-]+', 'g');
      els = this.el.root.find('*');
      results = [];
      for (i = 0, len = els.length; i < len; i++) {
        el = els[i];
        el = $(el);
        classes = (ref = el.attr('class')) != null ? ref.match(pattern) : void 0;
        if (classes != null) {
          results.push((function() {
            var j, len1, results1;
            results1 = [];
            for (j = 0, len1 = classes.length; j < len1; j++) {
              _class = classes[j];
              results1.push(this.addEl(_class.substring(cut.length), el));
            }
            return results1;
          }).call(this));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    return UpstartMonitor;

  })();

}).call(this);

//# sourceMappingURL=UpstartMonitor.js.map
