// Generated by CoffeeScript 1.9.1
(function() {
  this.UpstartMonitor = (function() {
    UpstartMonitor.prototype.ns = null;

    UpstartMonitor.prototype.el = null;

    UpstartMonitor.prototype.cnf = null;

    UpstartMonitor.prototype.job = null;

    UpstartMonitor.prototype.tag = null;

    function UpstartMonitor(el, cnf) {
      var job, jobName, ref, ref1, tag, tagName;
      this.cnf = cnf;
      this.ns = arguments.callee.name;
      this.el = {};
      this.addEl('root', el);
      this.initEl();
      this.job = {};
      this.tag = {};
      ref = this.cnf.tag;
      for (tagName in ref) {
        tag = ref[tagName];
        this.createTag(tag);
      }
      ref1 = this.cnf.job;
      for (jobName in ref1) {
        job = ref1[jobName];
        this.createJob(job);
      }
      if (typeof console !== "undefined" && console !== null) {
        console.log(this);
      }
    }

    UpstartMonitor.prototype.createTag = function(tag) {
      var ref;
      this.tag[tag.name] = $('<button class="navbar-btn btn btn-xs btn-success"></button>').data(tag).text((ref = tag.name) != null ? ref : '').appendTo(this.el.tag);
      return this.el.tag.append(' ');
    };

    UpstartMonitor.prototype.createJob = function(job) {
      var i, len, map, ref, ref1, tagEl, tagName, td;
      this.job[job.name] = map = {
        row: null,
        name: null,
        started: null,
        stopped: null,
        start: null,
        stop: null,
        restrat: null,
        log: null,
        tags: null
      };
      td = '<td></td>';
      map.row = $('<tr></tr>').addClass('danger').appendTo(this.el.job);
      map.name = $('<strong></strong>').text((ref = job.name) != null ? ref : '').appendTo($(td).attr('width', '80%').appendTo(map.row));
      map.tags = $(td).appendTo(map.row);
      ref1 = job.tag;
      for (i = 0, len = ref1.length; i < len; i++) {
        tagName = ref1[i];
        tagEl = $('<button class="btn btn-xs btn-success"></button>').data(this.cnf.tag[tagName]).text(tagName != null ? tagName : '').appendTo(map.tags);
        this.tag[tagName].add(tagEl);
        map.tags.append(' ');
      }
      map.started = $('<span class="label label-success">0</span>').appendTo($(td).appendTo(map.row));
      map.stopped = $('<span class="label label-danger">0</span>').appendTo($(td).appendTo(map.row));
      map.start = $('<button class="btn btn-xs btn-success" title="Start"> <span class="glyphicon glyphicon-play"></span> </button>').prop('disabled', true).appendTo($(td).appendTo(map.row));
      map.stop = $('<button class="btn btn-xs btn-danger" title="Stop"> <span class="glyphicon glyphicon-stop"></span> </button>').prop('disabled', true).appendTo($(td).appendTo(map.row));
      map.restart = $('<button class="btn btn-xs btn-warning" title="Restart"> <span class="glyphicon glyphicon-refresh"></span> </button>').prop('disabled', true).appendTo($(td).appendTo(map.row));
      return map.log = $('<button class="btn btn-xs btn-info" title="Log"> <span class="glyphicon glyphicon-open-file"></span> </button>').appendTo($(td).appendTo(map.row));
    };

    UpstartMonitor.prototype.addEl = function(name, tmpl) {
      if (tmpl == null) {
        tmpl = '<div></div>';
      }
      return this.el[name] = $(tmpl).addClass(this.getElClass(name));
    };

    UpstartMonitor.prototype.getElClass = function(name) {
      return this.ns + '-el-' + name;
    };

    UpstartMonitor.prototype.getNsClass = function(name) {
      return this.ns + '-' + name;
    };

    UpstartMonitor.prototype.getNsSelector = function(name) {
      return '.' + this.ns + '-' + name;
    };

    UpstartMonitor.prototype.initEl = function() {
      var _class, classes, cut, el, els, i, len, pattern, ref, results;
      cut = this.getElClass('');
      pattern = new RegExp(cut + '[a-zA-Z0-9_-]+', 'g');
      els = this.el.root.find('*');
      results = [];
      for (i = 0, len = els.length; i < len; i++) {
        el = els[i];
        el = $(el);
        classes = (ref = el.attr('class')) != null ? ref.match(pattern) : void 0;
        if (classes != null) {
          results.push((function() {
            var j, len1, results1;
            results1 = [];
            for (j = 0, len1 = classes.length; j < len1; j++) {
              _class = classes[j];
              results1.push(this.addEl(_class.substring(cut.length), el));
            }
            return results1;
          }).call(this));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    return UpstartMonitor;

  })();

}).call(this);

//# sourceMappingURL=UpstartMonitor.js.map
